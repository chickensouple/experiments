import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import os
import imageio


def make_animation(directory, target_image, save_file):
    file_list = list(os.listdir(directory))
    file_nums = []
    for file in file_list:
        if file == "image.png":
            continue
        if ".pickle" in file:
            continue
        file_nums.append(int(file.split(".")[0].split("_")[1]))
    file_nums.sort()
    print(file_nums)

    def update_animation(num, file_nums, directory):
        plt.clf()

        plt.subplot(1, 2, 1)
        plt.axis('off')
        if num >= len(file_nums):
            image_file = os.path.join(directory, "image_{}.png".format(file_nums[-1]))
            image = imageio.imread(image_file)
            plt.imshow(image)
            plt.title("Final Iteration")
        else:
            image_file = os.path.join(directory, "image_{}.png".format(file_nums[num]))
            image = imageio.imread(image_file)
            plt.imshow(image)
            plt.title("Iteration {}".format(file_nums[num]))

        plt.subplot(1, 2, 2)
        plt.axis('off')
        plt.imshow(target_image)
        plt.title("Target Image")

    fig = plt.figure(figsize=[12.8, 4.6], dpi=100)
    anim = animation.FuncAnimation(
        fig,
        update_animation,
        len(file_nums) + 10,
        fargs=(file_nums, directory),
        interval=50,
        blit=False)

    if save_file is not None:
        # This can be a pretty big animation.
        # You may need to remove the memory limits on imagemagick.
        anim.save(save_file, writer="imagemagick", fps=20)
        print("Done saving animation.")
    plt.show()

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Make animation.")
    parser.add_argument(
        "--image_dir",
        action="store",
        type=str,
        required=True,
        help="Directory of all the saved images generated by main.py.")
    parser.add_argument(
        "--target_image",
        action="store",
        type=str,
        required=True,
        help="Path to the original image.")
    parser.add_argument(
        "--save_file",
        action="store",
        type=str,
        default=None,
        help="File to store the saved animation in.")
    args = parser.parse_args()

    target_image = imageio.imread(args.target_image)
    make_animation(args.image_dir, target_image, args.save_file)
